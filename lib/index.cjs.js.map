{"version":3,"file":"index.cjs.js","sources":["../src/highlighted-code-block.js","../src/strikethrough.js","../src/tables.js","../src/task-list-items.js","../src/index.js"],"sourcesContent":["var highlightRegExp = /highlight-(?:(?:text|source)-)?([a-z0-9]+)/\n\nexport default function highlightedCodeBlock (turndownService) {\n  turndownService.addRule('highlightedCodeBlock', {\n    filter: function (node) {\n      var firstChild = node.firstChild\n      return (\n        node.nodeName === 'DIV' &&\n        highlightRegExp.test(node.className) &&\n        firstChild &&\n        firstChild.nodeName === 'PRE'\n      )\n    },\n    replacement: function (content, node, options) {\n      var className = node.className || ''\n      var language = (className.match(highlightRegExp) || [null, ''])[1]\n\n      return (\n        '\\n\\n' + options.fence + language + '\\n' +\n        node.firstChild.textContent +\n        '\\n' + options.fence + '\\n\\n'\n      )\n    }\n  })\n}\n","export default function strikethrough (turndownService) {\n  turndownService.addRule('strikethrough', {\n    filter: ['del', 's', 'strike'],\n    replacement: function (content) {\n      return '~~' + content + '~~'\n    }\n  })\n}\n","var rules = {}\n\n// Helper function to safely get text content and clean it\nfunction cleanCellContent(content) {\n  if (!content) return '   ' // Default empty cell content\n  \n  // Clean and normalize content\n  let cleaned = content\n    .trim()\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .replace(/\\|/g, '\\\\|') // Escape pipes\n    .replace(/\\\\/g, '\\\\\\\\') // Escape backslashes\n    .replace(/\\n+/g, ' ') // Convert newlines to spaces\n    .replace(/\\r+/g, ' ') // Convert carriage returns to spaces\n  \n  // If content is still empty or only whitespace, provide default\n  if (!cleaned || cleaned.match(/^\\s*$/)) {\n    return '   '\n  }\n  \n  // Ensure minimum width for table readability\n  if (cleaned.length < 3) {\n    cleaned += ' '.repeat(3 - cleaned.length)\n  }\n  \n  return cleaned\n}\n\n// Enhanced cell replacement with colspan support\nfunction cell(content, node, index) {\n  if (index === null && node && node.parentNode) {\n    index = Array.prototype.indexOf.call(node.parentNode.childNodes, node)\n  }\n  if (index === null) index = 0\n  \n  var prefix = ' '\n  if (index === 0) prefix = '| '\n  \n  let cellContent = cleanCellContent(content)\n  \n  // Handle colspan by adding extra empty cells\n  let colspan = 1\n  if (node && node.getAttribute) {\n    colspan = parseInt(node.getAttribute('colspan') || '1', 10)\n    if (isNaN(colspan) || colspan < 1) colspan = 1\n  }\n  \n  let result = prefix + cellContent + ' |'\n  \n  // Add empty cells for colspan\n  for (let i = 1; i < colspan; i++) {\n    result += '   |'\n  }\n  \n  return result\n}\n\n// Check if this is a heading row (enhanced for edge cases)\nfunction isHeadingRow(tr) {\n  if (!tr || !tr.parentNode) return false\n  \n  var parentNode = tr.parentNode\n  \n  // Check if parent is THEAD\n  if (parentNode.nodeName === 'THEAD') return true\n  \n  // Check if it's the first row and contains TH elements\n  if (parentNode.firstChild === tr && \n      (parentNode.nodeName === 'TABLE' || parentNode.nodeName === 'TBODY')) {\n    \n    // Check if all child nodes are TH (ignore text nodes)\n    var cellNodes = Array.prototype.filter.call(tr.childNodes, function(n) {\n      return n.nodeType === 1 // Element nodes only\n    })\n    \n    if (cellNodes.length === 0) return false\n    \n    return Array.prototype.every.call(cellNodes, function (n) { \n      return n.nodeName === 'TH' \n    })\n  }\n  \n  return false\n}\n\n// Get table column count (handles edge cases)\nfunction getTableColCount(table) {\n  if (!table || !table.rows) return 0\n  \n  let maxCols = 0\n  for (let i = 0; i < table.rows.length; i++) {\n    const row = table.rows[i]\n    if (!row || !row.childNodes) continue\n    \n    let colCount = 0\n    for (let j = 0; j < row.childNodes.length; j++) {\n      const cell = row.childNodes[j]\n      if (cell.nodeType === 1 && (cell.nodeName === 'TD' || cell.nodeName === 'TH')) {\n        const colspan = parseInt(cell.getAttribute('colspan') || '1', 10)\n        colCount += isNaN(colspan) ? 1 : Math.max(1, colspan)\n      }\n    }\n    \n    if (colCount > maxCols) maxCols = colCount\n  }\n  \n  return maxCols\n}\n\n// Check if table should be skipped (too simple or malformed)\nfunction shouldSkipTable(table) {\n  if (!table) return true\n  \n  // Skip completely empty tables\n  if (!table.rows || table.rows.length === 0) return true\n  \n  // Count actual content cells\n  let contentCells = 0\n  let totalCells = 0\n  \n  for (let i = 0; i < table.rows.length; i++) {\n    const row = table.rows[i]\n    if (!row || !row.childNodes) continue\n    \n    for (let j = 0; j < row.childNodes.length; j++) {\n      const cell = row.childNodes[j]\n      if (cell.nodeType === 1 && (cell.nodeName === 'TD' || cell.nodeName === 'TH')) {\n        totalCells++\n        if (cell.textContent && cell.textContent.trim()) {\n          contentCells++\n        }\n      }\n    }\n  }\n  \n  // Skip if no cells or only one cell with no meaningful content\n  if (totalCells === 0) return true\n  if (totalCells === 1 && contentCells === 0) return true\n  \n  return false\n}\n\nrules.tableCell = {\n  filter: ['th', 'td'],\n  replacement: function (content, node) {\n    return cell(content, node, null)\n  }\n}\n\nrules.tableRow = {\n  filter: 'tr',\n  replacement: function (content, node) {\n    // Skip empty rows\n    if (!content || !content.trim()) return ''\n    \n    var borderCells = ''\n    \n    // Add separator row for heading\n    if (isHeadingRow(node)) {\n      const table = node.closest('table')\n      if (table) {\n        const colCount = getTableColCount(table)\n        \n        if (colCount > 0) {\n          for (var i = 0; i < colCount; i++) {\n            const prefix = i === 0 ? '| ' : ' '\n            borderCells += prefix + '---' + ' |'\n          }\n        }\n      }\n    }\n    \n    return '\\n' + content + (borderCells ? '\\n' + borderCells : '')\n  }\n}\n\nrules.table = {\n  filter: 'table',\n  replacement: function (content, node) {\n    // Check if table should be skipped\n    if (shouldSkipTable(node)) {\n      return ''\n    }\n    \n    // Clean up content (remove extra newlines)\n    content = content.replace(/\\n+/g, '\\n').trim()\n    \n    // If no content after cleaning, return empty\n    if (!content) return ''\n    \n    // Split into lines and filter out empty lines\n    const lines = content.split('\\n').filter(line => line.trim())\n    \n    if (lines.length === 0) return ''\n    \n    // Check if we need to add a header row\n    const hasHeaderSeparator = lines.length >= 2 && /\\|\\s*-+/.test(lines[1])\n    \n    let result = lines.join('\\n')\n    \n    // If no header separator exists, add a simple one\n    if (!hasHeaderSeparator && lines.length >= 1) {\n      const firstLine = lines[0]\n      const colCount = (firstLine.match(/\\|/g) || []).length - 1\n      \n      if (colCount > 0) {\n        let separator = '|'\n        for (let i = 0; i < colCount; i++) {\n          separator += ' --- |'\n        }\n        \n        // Insert separator after first line\n        const resultLines = [lines[0], separator, ...lines.slice(1)]\n        result = resultLines.join('\\n')\n      }\n    }\n    \n    return '\\n\\n' + result + '\\n\\n'\n  }\n}\n\n// Remove table sections but keep content\nrules.tableSection = {\n  filter: ['thead', 'tbody', 'tfoot'],\n  replacement: function (content) {\n    return content\n  }\n}\n\n// Remove captions and colgroups\nrules.tableCaption = {\n  filter: ['caption'],\n  replacement: function() { return '' }\n}\n\nrules.tableColgroup = {\n  filter: ['colgroup', 'col'],\n  replacement: function() { return '' }\n}\n\nexport default function tables(turndownService) {\n  for (var key in rules) {\n    turndownService.addRule(key, rules[key])\n  }\n}\n","export default function taskListItems (turndownService) {\n  turndownService.addRule('taskListItems', {\n    filter: function (node) {\n      return node.type === 'checkbox' && node.parentNode.nodeName === 'LI'\n    },\n    replacement: function (content, node) {\n      return (node.checked ? '[x]' : '[ ]') + ' '\n    }\n  })\n}\n","import highlightedCodeBlock from './highlighted-code-block.js'\nimport strikethrough from './strikethrough.js'\nimport tables from './tables.js'\nimport taskListItems from './task-list-items.js'\n\nfunction gfm (turndownService) {\n  turndownService.use([\n    highlightedCodeBlock,\n    strikethrough,\n    tables,\n    taskListItems\n  ])\n}\n\nexport { gfm, highlightedCodeBlock, strikethrough, tables, taskListItems }\nexport default gfm "],"names":["cell"],"mappings":"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"}